package fr.idformation.evaluation.core.domain;

import java.util.Set;

import fr.idformation.evaluation.ConstantList;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = "client")
public class Customer {

	/**
	 * The customer entity's autogenerated id number.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "cli_id", nullable = false)
	private Integer id;

	/**
	 * The customer entity's first name.
	 */
	@Size(max = ConstantList.MAX_SIZE)
	@Column(name = "cli_prenom", nullable = false)
	private String firstName;

	/**
	 * The customer entity's last name.
	 */
	@Size(max = ConstantList.MAX_SIZE)
	@Column(name = "cli_nom", nullable = false)
	private String lastName;

	/**
	 * The customer entity's adress, usually a number and the street name.
	 */
	@Size(max = ConstantList.MAX_SIZE)
	@Column(name = "cli_adresse", nullable = true)
	private String adress;

	/**
	 * The customer entity's zip code , usually a 6 figure number.
	 */
	@Size(max = ConstantList.ZIP_SIZE)
	@Column(name = "cli_code_postal", nullable = true)
	private String zipCode;

	/**
	 * The customer entity's country.
	 */
	@Size(max = ConstantList.MAX_SIZE)
	@Column(name = "cli_pays", nullable = true)
	private String country;

	/**
	 * The customer entity's contact List.
	 */
	@OneToMany(mappedBy = "customer", cascade = CascadeType.ALL)
	private Set<Contact> contacts;

	/**
	 * @return the customer entity's id
	 */
	public Integer getId() {
		return id;
	}

	/**
	 * @param pId the customer entity's id to set
	 */
	public void setId(final Integer pId) {
		this.id = pId;
	}

	/**
	 * @return the customer entity's firstName
	 */
	public String getFirstName() {
		return firstName;
	}

	/**
	 * @param pFirstName the customer entity's firstName to set
	 */
	public void setFirstName(final String pFirstName) {
		this.firstName = pFirstName;
	}

	/**
	 * @return the customer entity's lastName
	 */
	public String getLastName() {
		return lastName;
	}

	/**
	 * @param pLastName customer entity's the lastName to set
	 */
	public void setLastName(final String pLastName) {
		this.lastName = pLastName;
	}

	/**
	 * @return the customer entity's adress
	 */
	public String getAdress() {
		return adress;
	}

	/**
	 * @param pAdress customer entity's the adress to set
	 */
	public void setAdress(final String pAdress) {
		this.adress = pAdress;
	}

	/**
	 * @return the customer entity's zipCode
	 */
	public String getZipCode() {
		return zipCode;
	}

	/**
	 * @param pZipCode the customer entity's zipCode to set
	 */
	public void setZipCode(final String pZipCode) {
		this.zipCode = pZipCode;
	}

	/**
	 * @return the customer entity's country
	 */
	public String getCountry() {
		return country;
	}

	/**
	 * @param pCountry the customer entity's country to set
	 */
	public void setCountry(final String pCountry) {
		this.country = pCountry;
	}

	/**
	 * @return the contacts
	 */
	public Set<Contact> getContacts() {
		return contacts;
	}

	/**
	 * @param pContacts the contacts to set
	 */
	public void setContacts(final Set<Contact> pContacts) {
		this.contacts = pContacts;
	}

	/**
	 * @param pContact
	 */
	public void addContact(final Contact pContact) {
		this.contacts.add(pContact);
		pContact.setCustomer(this);

	}

	/**
	 *
	 * @param pContact
	 */
	public void removeContact(final Contact pContact) {
		this.contacts.remove(pContact);
	}

	/**
	 * The customer entity's default contructor.
	 */
	public Customer() {
		super();
	}

}
