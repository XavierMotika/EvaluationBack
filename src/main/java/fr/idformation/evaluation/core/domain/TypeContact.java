package fr.idformation.evaluation.core.domain;

import java.util.Set;

import fr.idformation.evaluation.ConstantList;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = "type_contact")
public class TypeContact {

	/**
	 * The contact type entity's autogenerated id number.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "tco_id", nullable = false)
	private Short id;

	/**
	 * The contact type entity's label.
	 */
	@Size(max = ConstantList.MAX_SIZE)
	@Column(name = "tco_libelle", nullable = false)
	private String label;

	/**
	 * The set of contacts referenced by the entity.
	 */
	@OneToMany(mappedBy = "typeContact", cascade = CascadeType.ALL)
	private Set<Contact> contacts;

	/**
	 * @return the contacts
	 */
	public Set<Contact> getContacts() {
		return contacts;
	}

	/**
	 * @param pContacts the contacts to set
	 */
	public void setContacts(final Set<Contact> pContacts) {
		this.contacts = pContacts;
	}

	/**
	 * @return the contact type entity's id
	 */
	public Short getId() {
		return id;
	}

	/**
	 * @param pId the contact type entity's id to set
	 */
	public void setId(final Short pId) {
		this.id = pId;
	}

	/**
	 * @return the contact type entity's label
	 */
	public String getLabel() {
		return label;
	}

	/**
	 * @param pLabel the contact type entity's label to set
	 */
	public void setLabel(final String pLabel) {
		this.label = pLabel;
	}

	/**
	 * @param pContact the contact to be added to the contact list and this entity
	 */
	public void addContact(final Contact pContact) {
		this.contacts.add(pContact);
		pContact.setTypeContact(this);

	}

	/**
	 *
	 * @param pContact the contact to be remover to the contact list and this entity
	 */
	public void removeContact(final Contact pContact) {
		this.contacts.remove(pContact);
	}

	/**
	 * The customer entity's default contructor.
	 */
	public TypeContact() {
		super();
	}

}
