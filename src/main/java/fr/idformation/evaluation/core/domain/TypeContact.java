package fr.idformation.evaluation.core.domain;

import java.util.Set;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = "type_contact")
public class TypeContact {

	/**
	 * The contact type entity's autogenerated id number
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "tco_id", nullable = false)
	private Short id;

	/**
	 * The contact type entity's label
	 */
	@Size(max = 100)
	@Column(name = "tco_libelle", nullable = false)
	private String label;

	/**
	 * The
	 */
	@OneToMany(mappedBy = "typeContact", cascade = CascadeType.ALL)
	private Set<Contact> contacts;

	/**
	 * @return the contacts
	 */
	public Set<Contact> getContacts() {
		return contacts;
	}

	/**
	 * @param contacts the contacts to set
	 */
	public void setContacts(Set<Contact> contacts) {
		this.contacts = contacts;
	}

	/**
	 * @return the contact type entity's id
	 */
	public Short getId() {
		return id;
	}

	/**
	 * @param id the contact type entity's id to set
	 */
	public void setId(Short id) {
		this.id = id;
	}

	/**
	 * @return the contact type entity's label
	 */
	public String getLabel() {
		return label;
	}

	/**
	 * @param label the contact type entity's label to set
	 */
	public void setLabel(String label) {
		this.label = label;
	}

	/**
	 * @param contact
	 */
	public void addContact(Contact contact) {
		this.contacts.add(contact);
		contact.setTypeContact(this);

	}

	/**
	 *
	 * @param contact
	 */
	public void removeContact(Contact contact) {
		this.contacts.remove(contact);
	}

	/**
	 * The customer entity's default contructor
	 */
	public TypeContact() {
		super();
	}

}
